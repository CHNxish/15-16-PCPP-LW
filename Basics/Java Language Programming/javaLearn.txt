java库
java + javax

java.lang 编译环境自带包
java.util
javax.swing

char 双字节 boolean 布尔类型

java io
java.util.Scanner类 输入 System.in nextTypeName()方法
System.out.print() 输出
javax.swing.JOptionPane.showInputDialog()   返回值为String
javax.swing.JOptionPane.showMessageDialog()
javax.swing.JOptionPane.showConfirmDialog() 确定对话框
返回值
Yes按钮    JOptionPane.YES_OPTION     (0)
No按钮     JOptionPane.No_OPTION      (1)
Cancel按钮 JOptionPane.CANCEL_OPTION  (2)

GMT时间
System.currentTimeMillis() 返回值为long

随机数
Math.random() 返回值为double 0.0<= d <= 1.0
Math.random() * (n - m) + m 生成大于等于m小于n的随机数

java基本类型包装类
Byte Short Character Integer Long Float Double Boolean
Interger.parseInt(String s)

方法
public static main(String[] args){}
main方法可以调用其他类中的类 可以调用同类中的类

重载方法 方法名相同，参数列表不同
当多个同名方法存在时，编译器会选择最匹配的方法来使用，
如果找不到最合适的，就会产生歧义调用
Java中不存在重载运算符，只有string类可以用

Math类

TypeName data = new TypeName;
TypeName[] data = new TypeName[Size];
ClassName data = new ClassName(para);

char[] data = {....};
System.out.println(data); // print data

增强型for
// TypeName[] data = new TypeName[Size];
for(TypeName u : data){
    // use u do something
}

数组长度 data.length

数组复制
for循环
System.arraycopy(src, srcPos, dst, dstPos, length);
clone方法

java使用new后不需要delete，java有自动回收机制

java方法可变长参数
public static FuncName(TypeName... data);
data被当作数组使用，且TypeName是最后一个变量的类型
感觉只能传入相同类型的参数，没有c那么多功能，因为string和值类型同时传入没有办法区分

java.util.Arrays 专门用于Array的类 数组下标输入值和返回值都是0开始
Arrays.sort(arrayName); Arrays.sort(arrayName, left, right);
整个数组排序 从left到right-1排序 
Arrays.binarySearch(arrayName, key);
数组必须先正序排列好，如果找到key返回下标，如果没有找到返回-(插入点下标 + 1)，反正是个负值
Arrays.equals(arrayName1, arrayName2);
长度不同，每个位置不同，都会返回false
Arrays.fill(arrayName, fillValue); Arrays.fill(arrayName, left, right, fillValue);
填充fillValue给数组
Arrays类只能用于一维数组

// TypeName[][] data = new TypeName[size1][size2];
data.length 是(n - 1)维数组的个数
data[k].length 是第k个(n - 2)维数组的个数

锯齿数组 java中允许数组的长度不同
TypeName[][] data = new TypeName[size1][];
data[k] = new int[size2];

面对对象编程（OOP）
现实世界中可以明确标识的任意实体 - 对象
状态 state 行为 behavior
类定义不用在最后写";"  含有main方法的称为主类

在java中除了基本类型外，全部都是引用类型
基本类型赋值的时候，直接将对象的值赋给另一个对象
无论是数组，类等等，如果没有new分配空间，默认值是null，分配空间后值是分配后的地址值，类似c++中的指针
当一个引用类型给另一个相同引用类型赋值时，赋给的就是地址值，而另一个引用类型原本所指向的空间就会没用，而被java自动回收
一个源文件中只能有一个主类(main-class)
一个xxx.java文件中可以有多个类，但是被编译(javac)后，会产生多个xxx.class

Java库中的类
1)Data类 java.util.Date 1970.1.1开始算起  -- System.currentTimeMillis(): long
+Date()
+Date(elapseTime: long)

+toString(): String
+getTime(): long
+setTime(elapseTime: long): void

2)Random类 java.util.Random  --  Math.rand(): double (0.0 <= returnValue < 1.0)
+Random() 种子是当前时间
+Random(seed: long)

+nextInt(): int
+nextInt(n: int): int (0 < returnvalue < n)
+nextLong(): long
+nextDouble(): double
+nextFloat(): float
+nextBoolean: boolean

3)javax.swing.*类 JFrame JButtion JRadioButton JComboBox JList

static 类中的静态变量，静态常量，静态方法
static int data;
final static int data;
static int function(){}

Java中的包
package xxx.xxx; 生成目录
import xxx.xxx;  导入目录

javac -d . xxx.java 将xxx.java生成的xxx.class放在当前目录(.就是这个作用)
jar cvf xxx.jar xxx jar是打包命令 c:创建jar文件 v:生成详细信息 f:指定包名 xxx.jar:包的名字 xxx:目录
jar xvf xxx.jar
