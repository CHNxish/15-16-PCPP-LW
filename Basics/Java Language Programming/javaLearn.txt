java库
java + javax

java.lang 编译环境自带包
java.util
javax.swing

char 双字节 boolean 布尔类型

java io
java.util.Scanner类 输入 System.in nextTypeName()方法
System.out.print() 输出
javax.swing.JOptionPane.showInputDialog()   返回值为String
javax.swing.JOptionPane.showMessageDialog()
javax.swing.JOptionPane.showConfirmDialog() 确定对话框
返回值
Yes按钮    JOptionPane.YES_OPTION     (0)
No按钮     JOptionPane.No_OPTION      (1)
Cancel按钮 JOptionPane.CANCEL_OPTION  (2)

GMT时间
System.currentTimeMillis() 返回值为long

随机数
Math.random() 返回值为double 0.0<= d <= 1.0
Math.random() * (n - m) + m 生成大于等于m小于n的随机数

java基本类型包装类
Byte Short Character Integer Long Float Double Boolean
Interger.parseInt(String s)

方法
public static main(String[] args){}
main方法可以调用其他类中的类 可以调用同类中的类

重载方法 方法名相同，参数列表不同
当多个同名方法存在时，编译器会选择最匹配的方法来使用，
如果找不到最合适的，就会产生歧义调用
Java中不存在重载运算符，只有string类可以用

Math类

TypeName data = new TypeName;
TypeName[] data = new TypeName[Size];
ClassName data = new ClassName(para);

char[] data = {....};
System.out.println(data); // print data

增强型for
// TypeName[] data = new TypeName[Size];
for(TypeName u : data){
    // use u do something
}

数组长度 data.length

数组复制
for循环
System.arraycopy(src, srcPos, dst, dstPos, length);
clone方法

java使用new后不需要delete，java有自动回收机制

java方法可变长参数
public static FuncName(TypeName... data);
data被当作数组使用，且TypeName是最后一个变量的类型
感觉只能传入相同类型的参数，没有c那么多功能，因为string和值类型同时传入没有办法区分

java.util.Arrays 专门用于Array的类 数组下标输入值和返回值都是0开始
Arrays.sort(arrayName); Arrays.sort(arrayName, left, right);
整个数组排序 从left到right-1排序 
Arrays.binarySearch(arrayName, key);
数组必须先正序排列好，如果找到key返回下标，如果没有找到返回-(插入点下标 + 1)，反正是个负值
Arrays.equals(arrayName1, arrayName2);
长度不同，每个位置不同，都会返回false
Arrays.fill(arrayName, fillValue); Arrays.fill(arrayName, left, right, fillValue);
填充fillValue给数组
Arrays类只能用于一维数组

// TypeName[][] data = new TypeName[size1][size2];
data.length 是(n - 1)维数组的个数
data[k].length 是第k个(n - 2)维数组的个数

锯齿数组 java中允许数组的长度不同
TypeName[][] data = new TypeName[size1][];
data[k] = new int[size2];

面对对象编程（OOP）
现实世界中可以明确标识的任意实体 - 对象
状态 state 行为 behavior
类定义不用在最后写";"  含有main方法的称为主类

在java中除了基本类型外，全部都是引用类型
基本类型赋值的时候，直接将对象的值赋给另一个对象
无论是数组，类等等，如果没有new分配空间，默认值是null，分配空间后值是分配后的地址值，类似c++中的指针
当一个引用类型给另一个相同引用类型赋值时，赋给的就是地址值，而另一个引用类型原本所指向的空间就会没用，而被java自动回收
一个源文件中只能有一个主类(main-class)
一个xxx.java文件中可以有多个类，但是被编译(javac)后，会产生多个xxx.class

Java库中的类
1)Data类 java.util.Date 1970.1.1开始算起  -- System.currentTimeMillis(): long
+Date()
+Date(elapseTime: long)

+toString(): String
+getTime(): long
+setTime(elapseTime: long): void

2)Random类 java.util.Random  --  Math.rand(): double (0.0 <= returnValue < 1.0)
+Random() 种子是当前时间
+Random(seed: long)

+nextInt(): int
+nextInt(n: int): int (0 < returnvalue < n)
+nextLong(): long
+nextDouble(): double
+nextFloat(): float
+nextBoolean: boolean

3)javax.swing.*类 JFrame JButtion JRadioButton JComboBox JList

static 类中的静态变量，静态常量，静态方法
static int data;
final static int data;
static int function(){}

Java中的包
package xxx.xxx; 生成目录
import xxx.xxx;  导入目录

javac -d . xxx.java 将xxx.java生成的xxx.class放在当前目录(.就是这个作用)
jar cvf xxx.jar xxx jar是打包命令 c:创建jar文件 v:生成详细信息 f:指定包名 xxx.jar:包的名字 xxx:目录
jar xvf xxx.jar
manifest.mf

私有修饰符private    将访问权限限定在它自己的类内
默认修饰符（无修饰符） 将访问权限限定在包内
公共修饰符public     没有限定权限

private只能用在类的成员上，public可以用在类和类的成员上，局部变量不应该用private和public修饰符
如果不希望类被构造，构造函数可以使用private私有化，函数可用static访问

ClassName data = new ClassName[Size];
for(int i = 0; i < data.length; i++){
	data[i] = new ClassName();
}

String类
String s = "Welcome to java!"; // 编译时就放入常量池中
String s = new String("Welcome to java!"); // 运行时利用这个字符串在堆中初始化s

+equals(s1: string): boolean
+compareTo(s1: string): int
+length(): int
+charAt(index: int): char
+concat(s1: String): String
+substring(beginIndex: int, endIndex:int): String
+toLowerCase(): String
+toUpperCase(): String
+trim(): String
+replace(oldChar: char, newChar:char): String
+replaceFirst(oldString: String, newString: String): String
+replaceAll(oldString: String, newString:String): String
+split(delimiter: String): String[]
+indexOf(ch: char): int
+lastIndexOf(ch: char): int

字符数组和字符串的转换
char[] chars = "Java".toCharArray();
String str = new String(new char[]{'J', 'a', 'v', 'a'});
String str = String.valueOf(new char[]{'J', 'a', 'v', 'a'});

+valueOf(c: char): String
+valueOf(data: char[]): String
+valueOf(d: double): String
+valueOf(f: float): String
+valueOf(i: int): String
+valueOf(l: long): String
+valueOf(b: boolean): String

Double.parseDouble(str: String): double
Integer.parseInt(str: String): int

String.format(format, item1, item2, ..., itemn)

正则表达式
java.util.regex类  和 String.matches()

java中每个基本数据类型都有一个包装类
Character Boolean Byte Short Integer Long Float Double

StringBuilder StringBuffer
两者都是可以被修改的字符串，StringBuilder速度大于StringBuffer，但是StringBuffer支持多线程，StringBulider支持单线程，类中成员函数一致

+StringBuilder()
+StringBuilder(capacity: int)
+StringBuilder(s: String)

+append(data: char[]): StringBuilder
+append(data: char[], offset: int, len: int): StringBuilder
+append(v: aPrimitiveType): StringBuilder
+append(s: String): StringBuilder
+delete(startIndex: int, endIndex: int): StringBuilder
+deleteCharAt(index: int): StringBuilder
+insert(index: int, data: char[], offset: int, len: int): StringBuilder
+insert(offset: int, data: char[]): StringBuilder
+replace(startIndex: int, endIndex: int, s: String): StringBuilder
+reverse(): StringBuilder
+setCharAt(index: int, ch: char): void

+toString(): String
+capacity(): int
+charAt(index: int): char
+length(): int
+setLength(newLength: int): void
+substring(startIndex: int, endIndex: int): String
+trimToSize(): void

File类 一个File对象可以是文件或者目录 java.io.File 不包括读写
+File(pathname: String)
+File(parent: String, child: String)
+File(parent: File, child: String)

+exists(): boolean // 存在
+canRead(): boolean // 存在且可读
+canWrite(): boolean // 存在且可写
+isDirectory(): boolean // File类是目录
+isFile(): boolean // File类是文件
+getName(): String
+getPath(): String
+getParent(): String
+lastModified(): long // 最后一次修改时间，从UNIX时间
+length(): long // 目录或文件大小，不存在则为0
+lastFile(): File[] // 返回File对象目录下的所有文件
+createNewFile()
+mkdir()
+delete(): boolean // 删除
+renameTo(): boolean // 重命名

PrintWriter类 java.io.PrintWriter
+PrintWriter(file: File)
+PrintWriter(filename: String)
+print(data: AllType): void
+println(data: AllType): void (比print多一个换行，windows是\r\n，UNIX是\n)
+close():void // 关闭

Scanner类 java.util.Scanner
+Scanner(source: File)
+Scanner(source: String)
+hasNext(): boolean
+next(): String
+nextTypeName(): TypeName
+close() // 关闭

String lineSeparator = System.getProperty("line.separator"); // 获取行分隔符
+useDelimiter(String regex); // 设置新的分隔符

在构造PrintWriter和Scanner时，可能会抛出I/O异常，必须在方法旁边写
example: public static void main(String[] args) throws Exception{}

要使一个类是不可变的，那么必须满足
1)所有数据域都是私有的
2)没有修改器方法
3)没有一个访问器方法，它会返回一个指向可变数据域的引用

类中非static变量可用this.data的形式使用
类中static变量可用ClassName.data的形式使用

如果一个类中有多个构造方法，通常，无参或参数少的构造方法可以用this(参数表)调用参数多的构造方法

面向对象编程设计：封装 继承 多态

类的抽象和封装

聚集和组合

/* Java语言程序设计：Teaching by example and learning by doing */
设计一个类 1）类名 2）类中元素 3）类中方法 4）实现类 5）测试类
example:Course class
1)Course
2)-courseName: String
-students: String[]
-numberOfStudents: int
3)+Course(courseName: String)
+getCourseName(): String
+addStudent(student: String): void
+dropStudent(student: String): void
+getStudents(): String[]
+getNumberOfStudents(): int
4)Course.java
public class Course{
	private String courseName;
	private String[] students = new String[100];
	private int numberOfStudents;

	public Course(String courseName){
		this.courseName = courseName;
		this.numberOfStudents = 0;
	}

	/* 由于String不可变，所以不用担心引用值被修改问题 */
	public String getCourseName(){
		return courseName;
	}

	public void addStudent(String student){
		students[numberOfStudents] = student;
		numberOfStudents++;
		System.our.println("Add is OK!");
	}

	public void dropStudent(String student){
		int index;

		for(index = 0; index < numberOfStudents; index++){
			if(students[index].equals(student)){
				break;
			}
		}

		if(index == numberOfStudents){
			System.out.println(courseName + " is no " + student);
		}
		else{
			for(int i = index; i < numberOfStudents; i++){
				students[i] = students[i + 1];
			}
			numberOfStudents--;

			System.out.println("Drop is OK!");
		}
	}

	public String[] getStudents(){
		return students;
	}

	public int getNumberOfStudents(){
		return numberOfStudents;
	}
}
5)TestCourse.java
public class TestCourse{
	public static void main(String[] args){
		Course course1 = new Course("Data Structures");
		Course course2 = new Course("Database Systems");

		course1.addStudent("Peter Jones");
		course1.addStudent("Brian Smith");
		course1.addStudent("Anne Kennedy");

		course2.addStudent("Peter Jones");
		course2.addStudent("Steve Smith");

		System.out.prinln("Number of students in course1: "
			+ course1.getNumberOfStudents());
		String[] students = course1.getStudents();
		for(int i = 0; i < course1.getNumberOfStudents(); i++){
			System.out.println(students[i] + ", ");
		}

		System.out.println();
		System.out.print("Number of students in course2: "
			+ course2.getNumberOfStudents());
	}
}

继承 extends
父类中的私有数据域在该类之外是不可被访问的
java中不允许多重继承（几个类派生一个子类），java只允许单一继承
父类中的数据域只能通过访问器/修改器使用
父类中的构造方法和方法通过super使用
构造方法链：子类的构造方法中，如果没有显式调用父类的构造方法，那么在构造方法中会在第一步隐式调用父类的无参构造方法
最好能为每个类提供一个无参构造方法（如果需要的话），以便对该类进行扩展同时避免错误
java不支持super.super，因为this和super是私有成员
在java中父类和子类中出现同名成员函数，如果参数类型都相同，那么子类会覆盖父类的同名成员函数，如果参数类型不相同，会重载方法
java中每个类都源于java.lang.Object类，如果定义一个类时没有显式继承某个类，那么隐式extends Object
Object类中有个成员函数是toString()，它会返回ClassType@MemoryAddress
因为基本源于Object，最好覆盖这个方法
特殊使用：如果定义了一个对象data，那么System.out.println(data) <=> System.out.println(data.toString())

多态 父类型的变量可以引用子类型的对象
Object o = new GeometricObject();
System.out.println(o.toString());
当父类的引用的实例是个子类时，调用的函数，会从子类向父类的方法寻找，直到找到同名函数
/* 匹配方法的签名和绑定方法的实现是两个对立的事情 */
引用变量的声明类型决定了编译时匹配哪个方法，编译器会在编译时，根据参数类型，参数个数和参数顺序找到匹配的方法，一个方法可能在几个子类中都被实现
java虚拟机在运行时动态绑定方法的实现，这是由变量的实际类型所决定的

Object o = new Student(); // true
Student s = (Student)o;   // true

instanceof
Object instanceof anotherClass -> boolean
Object myObject = new Circle();
if(myObject instanceof Cirlce){
	System.out.println("The circle is diameter is " + ((Circle)myObject).getDiameter());
}

在子类中，使用签名equals(SomeClassName obj)覆盖Object中的equals是个常见的错误，这样只会重载这个方法，应该使用equals(Object obj)，方法内用(SomeClassName)obj.data来比较

java.util.ArrayList类 处理对象是Object 比普通数组更多的方法
+ArrayList()
+clear(): void

+add(o: Object):void
+add(index: int, o: Object): void
+set(index: int, o: Object): Object
+get(index: int): Object
+remove(o: Object): int
+remove(index: int): boolean

+isEmpty(): boolean
+size(): int
+contains(o: Object): boolean
+indexOf(o: Object): int
+lastIndexOf(o: Object): int
+toString(): String

类中修饰符 同一个类可访问 同一个包可访问 在子类内可访问 在不同包内可访问
public        true        true         true         true
protected     true        true         true         false
(default)     true        true         false        false
private       true        false        false        false

final 1)修饰变量是常量 2)修饰类是终极类(不能做父类)

异常处理
try{
	if(number2 == 0)
		throw new ArithmeticException("Divisor cannot be zero");
	System.out.println(number1 + " / " + number2 + " is " +
		(number1 / number2));
}
catch(ArithmeticException ex){
	System.out.println("Exception: an integer " + 
		"cannot be divided by zero ");
}
System.out.println("Execution continues ...");

异常处理最根本的优势就是将检测错误（由被调用方法完成）从处理错误（由调用方法完成）中分离出来
如果方法抛出一个异常，那么这个异常会给调用者，由调用者处理这个异常。

java API中定义的异常类
Object <- Throwable <- Exception <- ClassNotFoundException
                                 <- IOException
                                 <- RuntimeException <- ArithmeticException
                                                     <- NullPointerException
                                                     <- IndexOutOfBoundsException
                                                     <- IllegalArgumentEXception
                                                     <- 更多其他类
                                 <- 更多其他类
                    <- Error <- LinkageError
                             <- VirtualMachineError
                             <- 更多其他类


Throwable是所有异常的根，异常类主要分为系统错误，异常和运行时异常
1)系统错误，Error类，由虚拟机抛出，很少发生，如果出现也做不了什么
2)异常，Exception类，由程序和外部环境引起
3)运行时异常,RuntimeException类，程序设计错误，如类型转换，数组越界
Error和RuntimeException都是免检异常，而其他异常都是必检异常，意思是编译器强制程序员检查并处理它们

声明异常  -> 抛出异常   -> 捕获异常
被调用方法   被调用方法    调用方法
throws Exception -> throw new Exception() -> try catch

一个通用父类可以派生出各种异常类，如果一个catch块可以捕获一个父类的异常对象，那么它就能捕获那个父类的所有子类的异常对象

java.lang.Throwable
+getMessage(): String
+getString(): String
+printStackTrace(): void        // 在控制台上打印
+getStackTrace(): StackTraceElement[] // methodName className lineNumber

// TestException.java
public class TestException{
	public static void main(String[] args){
		try{
			System.out.println(sum(new int[]{1, 2, 3, 4, 5}));
		}
		catch(Exception ex){
			ex.printStackTrace();
			System.out.println("\n" + ex.getMessage());
			System.out.println("\n" + ex.toString);

			System.out.ptintln("\nTrace Info Obtained from getStackTrace");
			StackTraceElement[] traceElements = ex.getStackTrace();
			for(int i = 0; i < traceElements.length; i++){
				System.out.println("method " + traceElements[i].getMethodName());
				System.out.println("(" + traceElements[i].getClassName() + ":");
				System.out.println(traceElements[i].getLineNumber() + ")");
			}
		}
	}

	private static int sum(int[] list){
		int result;
		for(int i = 0; i <= list.length; i++)
			result += list[i];
		return result;
	}
}

finally
1)在try-catch之后一个finally块 
2)无论有没有异常，有没有被捕捉，即使有return语句，finally块都会被执行

抽象类 基本不含有具体实例的类 abstract
抽象类的构造方法是protected，需要被子类使用 抽象类中有抽象方法，只有声明，实现在子类中，而且要全部实现，不然也是抽象子类，方法不能是static的

java.util.Calendar 抽象类
#Calendar()
+get(field: int): int
+set(filed: int, value: int): void
+set(year: int, month: int, dayOfMonth: int): void
+getActualMaximum(field: int): int
+add(field: int, amount: int): void
+getTime(): java.util.Date
+setTime(date: java.util.Date): void
Calendar类的域常量:YEAR,MONTH,DATE,HOUR,HOUR_OF_DAY,MINUTE,SECOND,
DAY_OF_WEEK,DAY_OF_MONTH,DAY_OF_YEAR,WEEK_OF_MONTH,WEEK_OF_YEAR,AM_PM

java.util.GregorianCalendar Calendar的子类
+GregorianCanlendar()
+GregorianCanlendar(year: int, month: int, dayOfMonth: int)
+GregorianCanlendar(year: int, month: int, dayOfMonth: int, hour: int, minute: int, second: int)

接口 interface 和类相似的结构 只包含常量和抽象方法
接口中的量都是public final static 方法都是public abstract
instanceof对接口也有效 data instanceof InterfaceName

Comparable 接口  java.lang.Comparable
java.lang中String和Date类都是使用了Comparable接口定义compareTo(Object o)

Max.java
public class Max{
	public static Comparable max(Comparable o1, Comparable o2){
		if(o1.compareTo(o2) > 0)
			reutn o1;
		else
			return o2;
	}
}

ComparableRectangle.java
public class ComparableRectangle extends Rectangle implements Comparable{
	public ComparableRectangle(double width, double height){
		super(width, height);
	}

	public int compareTo(Object o){
		if(getArea() > (ComparableRectangle o).getArea())
			return 1;
		else if(getArea() < (ComparableRectangle o).getArea())
			return -1;
		else
			return 0;
	}
}

ActionListener 接口 监听器 java.awt.event.ActionListener
public interface ActionListener{
    // ActionEvent类来自java.awt.event中
	public abstract void actionPerformed(ActionEvent e);
}
java GUI中当按钮(可点击的对象)被点击，将会出发一个事件，将会被监听器监听
首先创建一个按钮 JButton jbt = new JButton();
为监听器创造动作
class ForJButton implements ActionListener{
	public void actionPerformed(ActionEvent e){
		// do something
	}
}
将这个监听器的实例放入按钮中
jbt.addActionListener(new ForJButton()); // void addActionListener(ActionListener a);

Cloneable 接口 克隆 java.lang.Cloneable
public interface Cloneable{
}
java.lang中Date，Calendar和ArrayList实现了Cloneable
Object类中定义了clone方法 protected native Object clone() throws CloneNotSupportedException;
自己定义的类中定义clone public Object clone() throws CloneNotSupportedException{
	super.clone()
}
实现的时候 ClassName data2 = (ClassName)data1.clone();
在Object复制的过程中是浅复制，复制结果是两个对象，对于数据域中的基本类型，直接复制值，如果是数据域中的类，那么复制的是引用
数组也支持clone ArrayName[] data2 = data1.clone()

基本类型可以用数组，包装类可以用java.util.ArrayList
Object <- Boolean
       <- Character
       <- Number <- Double
                 <- Float
                 <- Long
                 <- Integer
                 <- Short
                 <- Byte
上面除了Object类外都implements Comparable compareTo()
都复写了Object中的toString()和equals()

java.lang.Number 抽象类
+byteValue(): byte
+shortValue(): short
+intValue(): int
+longValue(): long
+floatValue(): float
+doubleValue(): double

java.lang.Integer
-value: int
+MAX_VALUE: int
+MIN_VALUE: int
+Integer(value: int)
+Integer(s: String)
+valueOf(s: String): Integer
+valueOf(s: String, radix: int): Integer
+parseInt(s: String): int
+parseInt(s: String, radix: int): int

java.lang.Double
-value: double
+MAX_VALUE: double
+MIN_VALUE: double
+Double(value: double)
+Double(s: String)
+valueOf(s: String): Double
+valueOf(s: String, radix: int): Double
+parseDouble(s: String): double
+parseDouble(s: String, radix: int): double

基本类型和包装类可以自动开箱和装箱

java.math BigInteger和BigDecimal类 扩展于Number 实现Comparable接口
add subtract multiple divide remainder

内部类
public class Test{
	// do something
	public class A{
		// do something
	}
}
编译后的文件OutClassName$InnerClassName.class
内部类可以引用定义在它嵌套的外部类中的数据和方法
如果内部类是非静态的
OutClass outerObject = new OutClass();
OutClass.InnerClass innerObject = outerObject.newInnerClass();
如果内部类是静态的
OUtClass.InnerClass innerObject = new OuterObject.InnerClass();

匿名内部类
new SuperClassName/InterfaceName(){
	// do something
}
编译后的文件OutClassName$N.class