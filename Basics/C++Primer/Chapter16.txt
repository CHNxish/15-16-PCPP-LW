模板与泛型编程

泛型编程与面向对象编程一样，都依赖于某种形式的多态性
面向对象编程中的多态性在运行时应用于存在继承关系的类。我们能够编写使用这些类的代码，
忽略基类与派生类之间类型上的差异。只要使用基类的引用或指针，基类类型或派生类类型的
对象就可以使用相同的代码
在泛型编程中，我们所编写的类和函数能够多态地用于跨越编程时不相关的类型。一个类或一
个函数可以用来操纵多种类型的对象。标准库中的容器，迭代器和算法是很好的泛型编程的例
子。标准库用独立于类型的方式定义每个容器，迭代器和算法，因此几乎可以在任意类型上使
用标准库的类和函数

模板形参可以是类型形参或非类型形参

inline放在模板形参表后

编写良好的泛型代码有两个重要原则
1.模板的形参尽量是const引用
2.对于类型的特殊要求尽量少(如重载操作符数量，特殊函数名的函数)

函数模板可以不显式指定模板实参，但是最好指定
类模板一定要显式指定模板实参

模板类型形参的模板实参必须匹配，不支持隐式转换，只接受两种转换
1.实参为非const类型，形参是const类型
2.数组或函数到指针的转换，数组名转换为指向该数组第一个元素的指针，函数名转换为指向该函数的指针

模板非类型形参支持隐式转换

函数指针接受函数模板的实例化
template <class T> int compare(const T &, const T &);
int (*pf1)(const int &, const int &) = compare; // 用compare的int实例化初始化pf1指针

包含编译模型和分别编译模型
大量的编译器不支持export关键字，因为严重影响效率，所以建议模板定义放在头文件中

类模板的成员函数与模板函数的区别：
前者支持隐式转换

类模板中的成员函数或成员变量，如果不使用，就不实例化，只有使用到，才实例化

类模板中的友元声明
1.普通非模板类或函数的友元声明
template <class Type> class Bar {
  friend class FooBar;
  friend void fcn();  
};
2.类模板或函数模板的友元声明
template <class Type> class Bar {
    template <class T> friend class Foo1;
    template <class T> friend void temp1_fcn1(const T&);
};
3.只授予对类模板或函数模板的特定实例的访问权的友元声明
template <class T> class Foo2;
template <class T> void temp1_fcn2(const T &);
template <class Type> class Bar {
    friend class Foo2<char *>;
    friend void temp1_fcn2<char *>(char* const T);
};
或更一般的:
template <class Type> class Bar {
    friend class Foo3<Type>;
    friend void temp1_fcn2<Type>(const Type &);  
};

类模板中的static成员，每种Type类型的模板类都有一个唯一的static成员变量

函数模板的特化
template <> 
int compare<const char *>(const char* const &, const char* const &);

类模板的特化
template <> 
class Queue<const char *> {
public:
    void push(const char *);
    void pop() { real_queue.pop(); }
    bool empty() const { return real_queue.empty(); }
    std::string &front() { return real_queue.front(); } 
    const std::string &front() const { return real_queue.front(); }

private:
    Queue<std::string> real_queue;    // forward calls to real_queue
};

类特化外部定义成员时，成员之前不能加template<>标记
void Queue<const char *>::push(const char *cp) { real_queue.push(cp); }

可以特化成员而不特化类
template <> 
void Queue<const char *>::push(const char* const &);

类模板的部分特化：多模板参数
template <class T1, class T2> 
class some_template {
    // ...  
};
template <class T1> 
class some_template<T1, int> {
    // ...  
};

重载与函数模板：非模板函数和函数模板支持重载，但是容易存在二义性
当实参到形参都不需要转换时，优先选择非模板函数，否则根据情况选择不需要转换的
建议定义函数模板特化，比使用非模板函数要好