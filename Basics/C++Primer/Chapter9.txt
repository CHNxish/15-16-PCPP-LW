顺序容器

操作集合(函数接口)对于顺序和关联容器形成的层次结构：
一些操作适用于所有容器类型
另一些操作则适用于顺序或关联容器类型
还有一些操作只适用于顺序或关联类型的一个子集

顺序容器
vector  支持快速随机访问
list    支持快速插入/删除
deque   双端队列
顺序容器适配器
stack   后进先出(LIFO) 栈
queue   先进先出(FIFO) 队列
priority_queue  有优先级管理的队列

容器类型构造函数
C<T> c;          空容器
C<T> c(c1);      复制另一个容器
C<T> c(b, e);    复制迭代器b到e的元素
C<T> c(n, t);    创建n个t元素
C<T> c(n);       创建n个默认初始化值的元素

容器中的元素类型必须支持
1）赋值运算
2）对象可以复制

1）迭代器不支持引用
2）对于容器中的部分函数，支持迭代器范围的，可以用同容器同类型，异容器同类型，数组同类型，来使用这些函数，应该是全部重载了

常用迭代器运算
*iter
iter -> element
++iter
--iter
iter++
iter--
iter1 == iter2
iter1 != iter2

vector和deque的迭代器支持的额外运算
iter + n
iter - n
iter1 += iter2
iter1 -= iter2
iter1 - iter2
> >= < <=

容器支持的操作
1）添删改查
2）设置大小
3）返回第一个和最后一个元素的迭代器

容器内定义的类型别名
size_type
iterator
const_iterator
reverse_iterator
const_reverse_iterator
difference_type
value_type
reference
const_reference

begin() end() rbegin() rend()
当迭代器是非const，则返回iterator或reverse_iterator
当迭代器是const，则返回const_前缀的迭代器

push_back(t: value_type): void
push_front(t: value_type): void list和deque容器可用
insert(q: iterator, t: value_type): iterator
insert(q: iterator, n: int, t: value_type): void
insert(q: iterator, b: iterator, e: iterator): void

容器的比较
< > == !=
ivec1 != ivec2

顺序容器的大小操作
size(): size_type
max_size(): size_type
empty(): bool
resize(n: int): void
resize(n: int, t: value_type): void

顺序容器获取元素
back(): value_type&
front(): value_type&
[] 和 at(n: int) 适用于vector和deque

顺序容器中的删除
erase(p: iterator)
erase(b: iterator, e: iterator)
clear()
pop_back()
pop_front() 适用于list和deque

algorithm头文件 find函数
find(b: iterator, e: iterator, t: value_type): iterator

顺序容器的复制操作
=
swap(c: container)
assign(b: iterator, e: iterator)
assign(n: int, t: value_type)

capacity(): container::size_type
reserve(n: int):

容器的选用
vector 快速随机访问 尾插删元素
deque 快速随机访问 首尾插删元素
list 任何位置快速插删元素 

string支持的函数
substr(): string
substr(pos: int): string
substr(pos: int, n: int): string
append(args: string)
replace(pos: int, len: int, args: string)
replace(b: iterator, e: iterator, args: string)
find(args: string)
rfind(args: string)
find_first_of(args: string)
find_last_of(args: string)
find_first_not_of(args: string)
find_last_not_of(args: string)